(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{365:function(s,a,v){"use strict";v.r(a);var t=v(45),_=Object(t.a)({},(function(){var s=this,a=s.$createElement,v=s._self._c||a;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("h1",{attrs:{id:"前端之性能优化方法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#前端之性能优化方法"}},[s._v("#")]),s._v(" 前端之性能优化方法")]),s._v(" "),v("p",[s._v("目的：提高页面加载速度，优化用户的访问体验。")]),s._v(" "),v("h4",{attrs:{id:"页面内容"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#页面内容"}},[s._v("#")]),s._v(" 页面内容")]),s._v(" "),v("p",[s._v("在加载阶段，核心的优化原则是：优化关键资源的加载速度，减少关键资源的个数，降低关键资源的 RTT 次数。")]),s._v(" "),v("p",[s._v("在交互阶段，核心的优化原则是：尽量减少一帧的生成时间。可以通过减少单次 JavaScript 的执行时间、避免强制同步布局、避免布局抖动、尽量采用 CSS 的合成动画、避免频繁的垃圾回收等方式来减少一帧生成的时长。")]),s._v(" "),v("ol",[v("li",[s._v("通过文件合并、css雪碧图、base64等方式来减少HTTP请求数，避免过多的请求造成等待的情况")]),s._v(" "),v("li",[s._v("通过DNS缓存等机制来减少DNS的查询次数")]),s._v(" "),v("li",[s._v("通过设置缓存策略，对常用不变的资源进行缓存")]),s._v(" "),v("li",[s._v("使用延时加载方式，减少首页首屏加载时需要的请求。只有当用户需要访问时再去请求资源")]),s._v(" "),v("li",[s._v("对某些资源使用预加载的方式，提高用户需要访问资源的响应速度")])]),s._v(" "),v("h4",{attrs:{id:"服务器方面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#服务器方面"}},[s._v("#")]),s._v(" 服务器方面")]),s._v(" "),v("ol",[v("li",[s._v("使用CDN服务，来提高用户对资源请求时的响应速度")]),s._v(" "),v("li",[s._v("服务器端启用Gzip等方式对于传输的资源进行压缩，减少文件的体积")])]),s._v(" "),v("h4",{attrs:{id:"css-和-js-方面"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#css-和-js-方面"}},[s._v("#")]),s._v(" css 和 js 方面")]),s._v(" "),v("ol",[v("li",[s._v("把样式放在页面的head标签中，减少页面的首次渲染时间。")]),s._v(" "),v("li",[s._v("避免使用@import 标签")]),s._v(" "),v("li",[s._v("把JS脚本放在页面底部或者使用defer 或async 属性，避免甲苯的加载和执行堵塞页面的渲染")]),s._v(" "),v("li",[s._v("压缩js 和css 文件，减少文件的体积")])]),s._v(" "),v("h3",{attrs:{id:"defer和-async的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#defer和-async的区别"}},[s._v("#")]),s._v(" defer和 async的区别")]),s._v(" "),v("p",[s._v("defer： 延迟执行，同HTML同时加载，解析完毕后执行脚本文件，多个脚本顺序执行")]),s._v(" "),v("p",[s._v("async:    异步执行， 如果已经加载好，就会开始执行，但是执行会阻塞文档的解析，但是加载不会阻塞，多个脚本的执行顺序无法保证")]),s._v(" "),v("h3",{attrs:{id:"线程和进程的区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#线程和进程的区别"}},[s._v("#")]),s._v(" 线程和进程的区别")]),s._v(" "),v("ol",[v("li",[s._v("根本区别： 进程是操作系统资源分配的基本单位；线程是处理器任务调度和执行的基本单位")]),s._v(" "),v("li",[s._v("包含关系： 一个进程至少有一个线程，一个进程可以运行多个线程，多个线程可以共享数据")]),s._v(" "),v("li",[s._v("影响关系：一个进程崩溃后不会影响其他进程，但是一个线程崩溃整个线程都会崩溃")]),s._v(" "),v("li",[s._v("资源开销：每个进程都有独立的代码和数据空间，程序之间的切换会有较大开销；线程可以看作是轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈，线程之间切换开销小。")])])])}),[],!1,null,null,null);a.default=_.exports}}]);