(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{382:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"javascript-之数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript-之数据类型"}},[t._v("#")]),t._v(" JavaScript 之数据类型")]),t._v(" "),a("h3",{attrs:{id:"基本类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型"}},[t._v("#")]),t._v(" 基本类型")]),t._v(" "),a("p",[t._v("基本类型分为以下六种：")]),t._v(" "),a("ul",[a("li",[t._v("string（字符串）")]),t._v(" "),a("li",[t._v("boolean（布尔值）")]),t._v(" "),a("li",[t._v("number（数字）")]),t._v(" "),a("li",[t._v("symbol（符号）")]),t._v(" "),a("li",[t._v("null（空值）")]),t._v(" "),a("li",[t._v("undefined（未定义）")]),t._v(" "),a("li",[t._v("bigint")])]),t._v(" "),a("p",[a("strong",[t._v("注意")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("string 、"),a("code",[t._v("number")]),t._v(" 、"),a("code",[t._v("boolean")]),t._v(" 和 "),a("code",[t._v("null")]),t._v(" "),a("code",[t._v("undefined")]),t._v(" 这五种类型统称为"),a("strong",[t._v("原始类型")]),t._v("（Primitive），表示不能再细分下去的基本类型;")]),t._v(" "),a("li",[a("code",[t._v("symbol")]),t._v("是ES6中新增的数据类型，"),a("code",[t._v("symbol")]),t._v(" 表示独一无二的值，通过 "),a("code",[t._v("Symbol")]),t._v(" 函数调用生成，由于生成的 symbol 值为原始类型，所以 "),a("code",[t._v("Symbol")]),t._v(" 函数不能使用"),a("code",[t._v("new")]),t._v(" 调用；")]),t._v(" "),a("li",[a("code",[t._v("null")]),t._v(" 和 "),a("code",[t._v("undefined")]),t._v(" 通常被认为是特殊值，这两种类型的值唯一，就是其本身。")])]),t._v(" "),a("p",[a("strong",[t._v("数字类型")])]),t._v(" "),a("p",[t._v("根据 ECMAScript 标准，JavaScript 中只有一种数字类型：基于 IEEE 754 标准的双精度 64 位二进制格式的值（-(263 -1) 到 263 -1）。它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：+Infinity，-Infinity 和 NaN (非数值，Not-a-Number)。")]),t._v(" "),a("p",[a("code",[t._v("Number")]),t._v("运算符转换规则：")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("null")]),t._v(" 转换为 0")]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" 转换为 "),a("code",[t._v("NaN")])]),t._v(" "),a("li",[a("code",[t._v("true")]),t._v(" 转换为 1，"),a("code",[t._v("false")]),t._v(" 转换为 0")]),t._v(" "),a("li",[t._v("字符串转换时遵循数字常量规则，转换失败返回"),a("code",[t._v("NaN")])])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 0                           parseInt(null) // => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => NaN         parseInt(undefined) // => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 0                                 parseInt('') // => NaN")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 123                    parseInt('123') // => 123")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123abc'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => NaN            parseInt('123abc') // => 123")]),t._v("\n")])])]),a("h4",{attrs:{id:"_0-1-0-2-为什么不等于-0-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_0-1-0-2-为什么不等于-0-3"}},[t._v("#")]),t._v(" 0.1+0.2 为什么不等于 0.3？")]),t._v(" "),a("p",[t._v("0.1 和 0.2 在转换成二进制后会无限循环，由于标准位数的限制，后面多余的位数会被截掉，此时就已经出现可精度的损失，相加后因为浮点数小数位的限制而截断的二进制数字再次转换为十进制就会变成 0.300000000000004...\n参考资料：冴羽大神掘金文章👉https://juejin.im/post/5e6ee1b5f265da5710439f21")]),t._v(" "),a("h3",{attrs:{id:"string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string"}},[t._v("#")]),t._v(" String")]),t._v(" "),a("p",[a("code",[t._v("String")]),t._v(" 运算符转换规则")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("null")]),t._v(" 转换为 "),a("code",[t._v("'null'")])]),t._v(" "),a("li",[a("code",[t._v("undefined")]),t._v(" 转换为 "),a("code",[t._v("undefined")])]),t._v(" "),a("li",[a("code",[t._v("true")]),t._v(" 转换为 "),a("code",[t._v("'true'")]),t._v("，"),a("code",[t._v("false")]),t._v(" 转换为 "),a("code",[t._v("'false'")])]),t._v(" "),a("li",[t._v("数字转换遵循通用规则，极大极小的数字使用指数形式")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("String(null)         // 'null'\n\nString(undefined)      // 'undefined'\n\nString(true)         // 'true'\n\nString(1)          // '1'\n\nString(-1)          // '-1'\n\nString(0)          // '0'\n\nString(-0)          // '0'\n\nString(Math.pow(1000,10))  // '1e+30'\n\nString(Infinity)       // 'Infinity'\n\nString(-Infinity)      // '-Infinity'\n\nString({})          // '[object Object]'\n\nString([1,[2,3]])      // '1,2,3'\n\nString(['koala',1])     //koala,1")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("\n")])])]),a("h3",{attrs:{id:"boolean"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#boolean"}},[t._v("#")]),t._v(" Boolean")]),t._v(" "),a("p",[a("code",[t._v("ToBoolean")]),t._v(" 运算符转换规则")]),t._v(" "),a("p",[t._v("除了下述 6 个值转换结果为 "),a("code",[t._v("false")]),t._v("，其他全部为"),a("code",[t._v("true")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("-0")]),t._v(" "),a("li",[t._v("0或+0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v("''（空字符串）")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("NaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\n\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Boolean")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])])]),a("p",[a("strong",[t._v("Null 类型")])]),t._v(" "),a("p",[t._v("Null 类型只有一个值： null。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object 为什么不是 null呢？")]),t._v("\n")])])]),a("p",[t._v("解释：typeof null 会输出 object，但 null 本身不是一个对象，这是 JS 存在的一个历史悠久的 bug。在 JS 的最初版本中使用的是 32 位的系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表的是对象，而 null 表示为全空，所以将它错误地判断成了 object\n**解决：**可以使用 Object.prototype.toString.call(null) -> 输出 [object Null]")]),t._v(" "),a("p",[a("strong",[t._v("Undefined 类型")])]),t._v(" "),a("p",[t._v("一个没有被赋值的变量会有个默认值 undefined。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 我申明我是一个变量 a")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// undefined 申明未赋值")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])]),a("p",[a("strong",[t._v("符号类型")])]),t._v(" "),a("p",[t._v("符号(Symbols)是ECMAScript 第6版新定义的。符号类型是唯一的并且是不可修改的, 并且也可以用来作为Object的key的值。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" symbol1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" symbol2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Symbol")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" symbol1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" symbol2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// symbol")]),t._v("\n\nsymbol1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" symbol2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("symbol1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'world'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("symbol1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("' '")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("symbol1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hello world")]),t._v("\n")])])]),a("h3",{attrs:{id:"对象类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象类型"}},[t._v("#")]),t._v(" 对象类型")]),t._v(" "),a("p",[a("strong",[t._v("object")]),t._v("  对象类型也叫引用类型，对象 Object(包括普通对象-Object，数组对象-Array，正则对象-RegExp，日期对象-Date，数学函数-Math，函数对象-Function)。对象在逻辑上是属性的无序集合，是存放各种值的容器。对象值存储的是引用地址，所以和基本类型值不可变的特性不同，对象值是可变的。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象字面量")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化一个对象")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" obj2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// object")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" author"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"布一"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"wechat"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hankewins"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"No.1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 布一")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("author"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("wechat"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Hankewins")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// No.1")]),t._v("\n")])])]),a("h3",{attrs:{id:"类型对比"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型对比"}},[t._v("#")]),t._v(" 类型对比")]),t._v(" "),a("p",[t._v("我们都知道JavaScript中有两大数据类型："),a("code",[t._v("基本类型")]),t._v("和"),a("code",[t._v("引用类型")]),t._v("，其中"),a("code",[t._v("基本类型")]),t._v("主要是把值存储在"),a("code",[t._v("栈内存")]),t._v("中，而"),a("code",[t._v("引用类型")]),t._v("却是把地址存储在"),a("code",[t._v("栈内存")]),t._v("中，把值存储在"),a("code",[t._v("堆内存")]),t._v("中，然后将"),a("code",[t._v("栈内存")]),t._v("中存储的地址指向"),a("code",[t._v("堆内存")]),t._v("中存储的值。")]),t._v(" "),a("h1",{attrs:{id:"js中的强制转换规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的强制转换规则"}},[t._v("#")]),t._v(" js中的强制转换规则")]),t._v(" "),a("h3",{attrs:{id:"toprimitive-转换为原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprimitive-转换为原始值"}},[t._v("#")]),t._v(" "),a("code",[t._v("ToPrimitive")]),t._v("(转换为原始值)")]),t._v(" "),a("p",[a("code",[t._v("ToPrimitive")]),t._v("对原始类型不发生转换处理，只"),a("strong",[t._v("针对引用类型（object）的")]),t._v("，其目的是将引用类型（object）转换为非对象类型，也就是原始类型。")]),t._v(" "),a("h1",{attrs:{id:"js转换规则不同场景应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js转换规则不同场景应用"}},[t._v("#")]),t._v(" js转换规则不同场景应用")]),t._v(" "),a("h3",{attrs:{id:"什么时候自动转换为string类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候自动转换为string类型"}},[t._v("#")]),t._v(" 什么时候自动转换为string类型")]),t._v(" "),a("p",[a("strong",[t._v("在没有对象的前提下")])]),t._v(" "),a("p",[t._v("字符串的自动转换，主要发生在字符串的"),a("strong",[t._v("加法运算")]),t._v("时。当一个值为字符串，另一个值为非字符串，则后者转为字符串。")]),t._v(" "),a("p",[t._v("'2' + 1 // '21'")]),t._v(" "),a("p",[t._v("'2' + true // \"2true\"")]),t._v(" "),a("p",[t._v("'2' + false // \"2false\"")]),t._v(" "),a("p",[t._v("'2' + undefined // \"2undefined\"")]),t._v(" "),a("p",[t._v("'2' + null // \"2null\"")]),t._v(" "),a("p",[a("strong",[t._v("当有对象且与对象"),a("code",[t._v("+")]),t._v("时候")])]),t._v(" "),a("p",[t._v("//toString的对象")]),t._v(" "),a("p",[t._v("var obj2 = {")]),t._v(" "),a("p",[t._v("toString:function(){")]),t._v(" "),a("p",[t._v("​    return 'a'")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("console.log('2'+obj2)")]),t._v(" "),a("p",[t._v("//输出结果2a")]),t._v(" "),a("p",[t._v("//常规对象")]),t._v(" "),a("p",[t._v("var obj1 = {")]),t._v(" "),a("p",[t._v("a:1,")]),t._v(" "),a("p",[t._v("b:2")]),t._v(" "),a("p",[t._v("}")]),t._v(" "),a("p",[t._v("console.log('2'+obj1)；")]),t._v(" "),a("p",[t._v("//输出结果 2[object Object]")]),t._v(" "),a("p",[t._v("//几种特殊对象")]),t._v(" "),a("p",[t._v("'2' + {} // \"2[object Object]\"")]),t._v(" "),a("p",[t._v("'2' + [] // \"2\"")]),t._v(" "),a("p",[t._v("'2' + function (){} // \"2function (){}\"")]),t._v(" "),a("p",[t._v("'2' + ['koala',1] // 2koala,1")]),t._v(" "),a("p",[t._v("对下面"),a("code",[t._v("'2'+obj2")]),t._v("详细举例说明如下：")]),t._v(" "),a("ol",[a("li",[t._v("左边为"),a("code",[t._v("string")]),t._v("，"),a("code",[t._v("ToPrimitive")]),t._v("原始值转换后不发生变化")]),t._v(" "),a("li",[t._v("右边转化时同样按照"),a("code",[t._v("ToPrimitive")]),t._v("进行原始值转换，由于指定的type是"),a("code",[t._v("number")]),t._v("，进行"),a("code",[t._v("ToPrimitive")]),t._v("转化调用"),a("code",[t._v("obj2.valueof()")]),t._v(",得到的不是原始值，进行第三步")]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("toString()")]),t._v(" "),a("code",[t._v("return 'a'")])]),t._v(" "),a("li",[t._v("符号两边存在"),a("code",[t._v("string")]),t._v("，而且是"),a("code",[t._v("+")]),t._v("号运算符则都采用"),a("code",[t._v("String")]),t._v("规则转换为"),a("code",[t._v("string")]),t._v("类型进行拼接")]),t._v(" "),a("li",[t._v("输出结果"),a("code",[t._v("2a")])])]),t._v(" "),a("p",[t._v("对下面"),a("code",[t._v("'2'+obj1")]),t._v("详细举例说明如下：")]),t._v(" "),a("ol",[a("li",[t._v("左边为"),a("code",[t._v("string")]),t._v("，"),a("code",[t._v("ToPrimitive")]),t._v("转换为原始值后不发生变化")]),t._v(" "),a("li",[t._v("右边转化时同样按照"),a("code",[t._v("ToPrimitive")]),t._v("进行原始值转换，由于指定的type是"),a("code",[t._v("number")]),t._v("，进行"),a("code",[t._v("ToPrimitive")]),t._v("转化调用"),a("code",[t._v("obj2.valueof()")]),t._v(",得到"),a("code",[t._v("{ a: 1, b: 2 }")])]),t._v(" "),a("li",[t._v("调用"),a("code",[t._v("toString()")]),t._v(" "),a("code",[t._v("return [object Object]")])]),t._v(" "),a("li",[t._v("符号两边存在"),a("code",[t._v("string")]),t._v("，而且是+号运算符则都采用"),a("code",[t._v("String")]),t._v("规则转换为"),a("code",[t._v("string")]),t._v("类型进行拼接")]),t._v(" "),a("li",[t._v("输出结果"),a("code",[t._v("2[object Object]")])])]),t._v(" "),a("h3",{attrs:{id:"什么时候自动转换为number类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候自动转换为number类型"}},[t._v("#")]),t._v(" 什么时候自动转换为Number类型")]),t._v(" "),a("p",[a("strong",[t._v("有加法运算符，但是无"),a("code",[t._v("String")]),t._v("类型的时候，都会优先转换为"),a("code",[t._v("Number")]),t._v("类型")])]),t._v(" "),a("p",[t._v("true + 0           // 1")]),t._v(" "),a("p",[t._v("true + true     // 2")]),t._v(" "),a("p",[t._v("true + false   //1")]),t._v(" "),a("p",[a("strong",[t._v("除了加法运算符，其他运算符都会把运算自动转成数值")])]),t._v(" "),a("p",[t._v("'5' - '2' // 3")]),t._v(" "),a("p",[t._v("'5' * '2' // 10")]),t._v(" "),a("p",[t._v("true - 1 // 0")]),t._v(" "),a("p",[t._v("false - 1 // -1")]),t._v(" "),a("p",[t._v("'1' - 1  // 0")]),t._v(" "),a("p",[t._v("'5' * []  // 0")]),t._v(" "),a("p",[t._v("false / '5' // 0")]),t._v(" "),a("p",[t._v("'abc' - 1  // NaN")]),t._v(" "),a("p",[t._v("null + 1 // 1")]),t._v(" "),a("p",[t._v("undefined + 1 // NaN")]),t._v(" "),a("p",[t._v("//一元运算符（注意点）")]),t._v(" "),a("p",[t._v("+'abc' // NaN")]),t._v(" "),a("p",[t._v("-'abc' // NaN")]),t._v(" "),a("p",[t._v("+true // 1")]),t._v(" "),a("p",[t._v("-false // 0")]),t._v(" "),a("h3",{attrs:{id:"什么时候进行布尔转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候进行布尔转换"}},[t._v("#")]),t._v(" 什么时候进行布尔转换")]),t._v(" "),a("ul",[a("li",[t._v("布尔比较时")]),t._v(" "),a("li",[a("code",[t._v("if(obj)")]),t._v(" , "),a("code",[t._v("while(obj)")]),t._v("等判断时或者 三元运算符只能够包含布尔值")])]),t._v(" "),a("p",[t._v("条件部分的每个值都相当于"),a("code",[t._v("false")]),t._v("，使用否定运算符后，就变成了"),a("code",[t._v("true")])]),t._v(" "),a("p",[t._v("if ( !undefined")]),t._v(" "),a("p",[t._v("&& !null")]),t._v(" "),a("p",[t._v("&& !0")]),t._v(" "),a("p",[t._v("&& !NaN")]),t._v(" "),a("p",[t._v("&& !''")]),t._v(" "),a("p",[t._v(") {")]),t._v(" "),a("p",[t._v("console.log('true');")]),t._v(" "),a("p",[t._v("} // true")]),t._v(" "),a("p",[t._v("//下面两种情况也会转成布尔类型")]),t._v(" "),a("p",[t._v("expression ? true : false")]),t._v(" "),a("p",[t._v("!! expression")]),t._v(" "),a("h1",{attrs:{id:"js中的数据类型判断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的数据类型判断"}},[t._v("#")]),t._v(" js中的数据类型判断")]),t._v(" "),a("p",[t._v("三种方式，分别为 "),a("code",[t._v("typeof")]),t._v("、"),a("code",[t._v("instanceof")]),t._v(" 和"),a("code",[t._v("Object.prototype.toString()")])]),t._v(" "),a("h3",{attrs:{id:"typeof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typeof"}},[t._v("#")]),t._v(" typeof")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("typeof")]),t._v("操作符来判断一个值属于哪种基本类型")]),t._v(" "),a("p",[t._v("typeof 'seymoe'  // 'string'")]),t._v(" "),a("p",[t._v("typeof true    // 'boolean'")]),t._v(" "),a("p",[t._v("typeof 10     // 'number'")]),t._v(" "),a("p",[t._v("typeof Symbol()  // 'symbol'")]),t._v(" "),a("p",[t._v("typeof null    // 'object' 无法判定是否为 null")]),t._v(" "),a("p",[t._v("typeof undefined  // 'undefined'")]),t._v(" "),a("p",[t._v("typeof {}      // 'object'")]),t._v(" "),a("p",[t._v("typeof []      // 'object'")]),t._v(" "),a("p",[t._v("typeof(() => {})  // 'function")]),t._v(" "),a("p",[t._v("上面代码的输出结果可以看出，")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("null")]),t._v(" 的判定有误差，得到的结果 如果使用 "),a("code",[t._v("typeof")]),t._v("，"),a("code",[t._v("null")]),t._v("得到的结果是"),a("code",[t._v("object")])]),t._v(" "),a("li",[t._v("操作符对对象类型及其子类型，例如函数（可调用对象）、数组（有序索引对象）等进行判定，则除了函数都会得到 "),a("code",[t._v("object")]),t._v(" 的结果。")])]),t._v(" "),a("p",[t._v("综上可以看出"),a("code",[t._v("typeOf")]),t._v("对于判断类型还有一些不足，在对象的子类型和"),a("code",[t._v("null")]),t._v("情况下。")]),t._v(" "),a("h3",{attrs:{id:"instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#instanceof"}},[t._v("#")]),t._v(" instanceof")]),t._v(" "),a("p",[t._v("通过 "),a("code",[t._v("instanceof")]),t._v(" 操作符也可以对对象类型进行判定，其原理就是测试构造函数的"),a("code",[t._v("prototype")]),t._v(" 是否出现在被检测对象的原型链上。")]),t._v(" "),a("p",[t._v("[] "),a("strong",[t._v("instanceof")]),t._v(" Array            // true")]),t._v(" "),a("p",[t._v("({}) "),a("strong",[t._v("instanceof")]),t._v(" Object         // true")]),t._v(" "),a("p",[t._v("(()=>{}) "),a("strong",[t._v("instanceof")]),t._v(" Function   // true")]),t._v(" "),a("p",[a("code",[t._v("instanceof")]),t._v(" 也不是万能的。 举个例子：")]),t._v(" "),a("p",[t._v("let arr = []")]),t._v(" "),a("p",[t._v("let obj = {}")]),t._v(" "),a("p",[t._v("arr instanceof Array  // true")]),t._v(" "),a("p",[t._v("arr instanceof Object  // true")]),t._v(" "),a("p",[t._v("obj instanceof Object  // true")]),t._v(" "),a("p",[t._v("在这个例子中，"),a("code",[t._v("arr")]),t._v(" 数组相当于 "),a("code",[t._v("new Array()")]),t._v(" 出的一个实例，所以 "),a("code",[t._v("arr.__proto__ === Array.prototype")]),t._v("，又因为 "),a("code",[t._v("Array")]),t._v("属于 "),a("code",[t._v("Object")]),t._v(" 子类型，即"),a("code",[t._v("Array.prototype.__proto__ === Object.prototype")]),t._v("，因此 "),a("code",[t._v("Object")]),t._v(" 构造函数在 "),a("code",[t._v("arr")]),t._v(" 的原型链上。所以 "),a("code",[t._v("instanceof")]),t._v(" 仍然无法优雅的判断一个值到底属于数组还是普通对象。")]),t._v(" "),a("p",[t._v("还有一点需要说明下，有些开发者会说 "),a("code",[t._v("Object.prototype.__proto__ === null")]),t._v("，岂不是说 "),a("code",[t._v("arr instanceof null")]),t._v(" 也应该为 "),a("code",[t._v("true")]),t._v("，这个语句其实会报错提示右侧参数应该为对象，这也印证 "),a("code",[t._v("typeof null")]),t._v(" 的结果为 "),a("code",[t._v("object")]),t._v(" 真的只是"),a("code",[t._v("javascript")]),t._v("中的一个"),a("code",[t._v("bug")]),t._v(" 。")]),t._v(" "),a("p",[a("code",[t._v("Object.prototype.toString()")]),t._v(" 可以说是判定 "),a("code",[t._v("JavaScript")]),t._v(" 中数据类型的终极解决方法了，具体用法请看以下代码：")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call({})       // '[object Object]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call([])       // '[object Array]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(() => {})    // '[object Function]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call('seymoe')    // '[object String]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(1)        // '[object Number]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(true)      // '[object Boolean]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(Symbol())    // '[object Symbol]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(null)      // '[object Null]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(undefined)    // '[object Undefined]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(new Date())   // '[object Date]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(Math)      // '[object Math]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(new Set())    // '[object Set]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(new WeakSet())  // '[object WeakSet]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(new Map())    // '[object Map]'")]),t._v(" "),a("p",[t._v("Object.prototype.toString.call(new WeakMap())  // '[object WeakMap]'")])])}),[],!1,null,null,null);s.default=e.exports}}]);