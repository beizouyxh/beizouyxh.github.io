(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{364:function(t,s,a){"use strict";a.r(s);var n=a(45),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" WebSocket")]),t._v(" "),a("h2",{attrs:{id:"为什么需要websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要websocket"}},[t._v("#")]),t._v(" 为什么需要WebSocket")]),t._v(" "),a("p",[t._v("我们已经有了 HTTP 协议，为什么还需要另一个协议？它能带来什么好处？")]),t._v(" "),a("p",[t._v("答案很简单，因为 HTTP 协议有一个缺陷："),a("strong",[t._v("通信只能由客户端发起，做不到服务器主动向客户端推送信息")])]),t._v(" "),a("p",[t._v("这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。我们只能使用"),a("a",{attrs:{href:"https://www.pubnub.com/blog/2014-12-01-http-long-polling/",target:"_blank",rel:"noopener noreferrer"}},[t._v('"轮询"'),a("OutboundLink")],1),t._v("：**每隔一段时候，就发出一个询问，了解服务器有没有新的信息。**最典型的场景就是聊天室。")]),t._v(" "),a("p",[a("strong",[t._v("轮询的效率低，非常浪费资源（因为必须不停连接，或者 HTTP 连接始终打开）")]),t._v("。因此，工程师们一直在思考，有没有更好的方法。WebSocket 就是这样发明的。")]),t._v(" "),a("p",[a("strong",[t._v("短轮询（客户端浏览器轮询服务器（polling））")]),t._v("\n这是最简单的一种解决方案，其原理是在客户端通过Ajax的方式的方式每隔一小段时间就发送一个请求到服务器，服务器返回最新数据，然后客户端根据获得的数据来更新界面，这样就间接实现了即时通信。")]),t._v(" "),a("p",[t._v("优点：兼容性强，实现非常简单\n缺点：延迟性高，非常消耗请求资源，影响性能（通常情况下数据都是没有发生改变的）")]),t._v(" "),a("p",[a("strong",[t._v("长轮询（long-polling）")]),t._v("\n这种方式是客户端发送一个请求到服务器，服务器查看客户端请求的数据是否发生了变化（是否有最新数据），如果发生变化则立即响应返回，否则保持这个连接并定期检查最新数据，直到发生了数据更新或连接超时。同时客户端连接一旦断开，则再次发出请求，这样在相同时间内大大减少了客户端请求服务器的次数。")]),t._v(" "),a("p",[t._v("长轮询优缺点：\n优点：兼容性好，资源浪费较小\n缺点：服务器 hold 连接会消耗资源，返回数据顺序无保证，难于管理维护\n"),a("strong",[t._v("WebSocket的出现，让服务器端可以主动向客户端发送信息，使得浏览器具备了实时双向通信的能力,这就是"),a("code",[t._v("WebSocket")]),t._v("解决的问题")])]),t._v(" "),a("p",[a("strong",[t._v("example：")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socketConnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("url")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端与服务器进行连接")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ws "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WebSocket")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回`WebSocket`对象，赋值给变量ws")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 连接成功回调")]),t._v("\n    ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onopen")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'连接成功'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我发送消息给服务端'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 客户端与服务器端通信")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监听服务器端返回的信息")]),t._v("\n    ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("e")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'服务器端返回：'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" e"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 返回websocket对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" wsValue "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("socketConnect")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ws://121.40.165.18:8800'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// websocket对象")]),t._v("\n")])])]),a("h3",{attrs:{id:"websocket不稳定"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket不稳定"}},[t._v("#")]),t._v(" WebSocket不稳定")]),t._v(" "),a("p",[t._v("WebSocket并不稳定，在使用一段时间后，可能会断开连接，貌似至今没有一个为何会断开连接的公论，所以我们需要让WebSocket保持连接状态，这里推荐两种方法。")]),t._v(" "),a("h4",{attrs:{id:"websocket设置变量-判断是否手动关闭连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket设置变量-判断是否手动关闭连接"}},[t._v("#")]),t._v(" WebSocket设置变量，判断是否手动关闭连接：")]),t._v(" "),a("p",[a("strong",[a("code",[t._v("class")]),t._v("类中就是用的这种方式")]),t._v(":设置一个变量，在webSocket关闭/报错的回调中，判断是不是手动关闭的，如果不是的话，就重新连接，这样做的优缺点如下：")]),t._v(" "),a("ul",[a("li",[t._v("优点：请求较少(相对于心跳连接)，易设置。")]),t._v(" "),a("li",[t._v("缺点：可能会导致丢失数据,在断开重连的这段时间中，恰好双方正在通信。")])]),t._v(" "),a("h4",{attrs:{id:"websocket心跳机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket心跳机制"}},[t._v("#")]),t._v(" WebSocket心跳机制：")]),t._v(" "),a("blockquote",[a("p",[t._v("因为第一种方案的缺点，并且可能会有其他一些未知情况导致断开连接而没有触发Error或Close事件。这样就导致实际连接已经断开了，而客户端和服务端却不知道，还在傻傻的等着消息来。")])]),t._v(" "),a("p",[t._v("然后聪明的程序猿们想出了一种叫做"),a("strong",[t._v("心跳机制")]),t._v("的解决方法：")]),t._v(" "),a("p",[t._v("客户端就像心跳一样每隔固定的时间发送一次"),a("code",[t._v("ping")]),t._v("，来告诉服务器，我还活着，而服务器也会返回"),a("code",[t._v("pong")]),t._v("，来告诉客户端，服务器还活着。")]),t._v(" "),a("h4",{attrs:{id:"websocket的当前状态-websocket-readystate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket的当前状态-websocket-readystate"}},[t._v("#")]),t._v(" WebSocket的当前状态:"),a("code",[t._v("WebSocket.readyState")])]),t._v(" "),a("p",[t._v("下面是"),a("code",[t._v("WebSocket.readyState")]),t._v("的四个值(四种状态)：")]),t._v(" "),a("ul",[a("li",[t._v("0: 表示正在连接")]),t._v(" "),a("li",[t._v("1: 表示连接成功，可以通信了")]),t._v(" "),a("li",[t._v("2: 表示连接正在关闭")]),t._v(" "),a("li",[t._v("3: 表示连接已经关闭，或者打开连接失败")])]),t._v(" "),a("p",[t._v("if (this.ws.readyState === 1) {\n// 检查ws为链接状态 才可发送\nthis.ws.send('ping'); // 客户端发送ping\n}")]),t._v(" "),a("h4",{attrs:{id:"websocket还可以发送-接收-二进制数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket还可以发送-接收-二进制数据"}},[t._v("#")]),t._v(" "),a("code",[t._v("WebSocket")]),t._v("还可以发送/接收 二进制数据")]),t._v(" "),a("p",[t._v("二进制数据包括："),a("code",[t._v("blob")]),t._v("对象和"),a("code",[t._v("Arraybuffer")]),t._v("对象，所以我们需要分开来处理。")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收数据")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("onmessage")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("event")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断 ArrayBuffer 对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Blob")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断 Blob 对象")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送 Blob 对象的例子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" file "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" document"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("querySelector")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input[type=\"file\"]'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("files"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("file"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送 ArrayBuffer 对象的例子")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" img "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" canvas_context"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getImageData")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("320")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" binary "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    binary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" img"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nws"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binary"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("buffer"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("如果你要发送的二进制数据很大的话，如何判断发送完毕："),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("**")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("webSocket.bufferedAmount")]),a("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v("属性，表示还有多少字节的二进制数据没有发送出去：\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" data "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBuffer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10000000")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsocket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("bufferedAmount "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送完毕")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送还没结束")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("上述栗子出自阮一峰老师的"),a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2017/05/websocket.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("WebSocket教程"),a("OutboundLink")],1)]),t._v(" "),a("h3",{attrs:{id:"websocket的优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket的优点"}},[t._v("#")]),t._v(" WebSocket的优点：")]),t._v(" "),a("p",[t._v("最后再吹一波WebSocket：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("双向通信(一开始说的，也是最重要的一点)。")])]),t._v(" "),a("li",[a("p",[t._v("数据格式比较轻量，性能开销小，通信高效")]),t._v(" "),a("p",[t._v("协议控制的数据包头部较小，而HTTP协议每次通信都需要携带完整的头部")])]),t._v(" "),a("li",[a("p",[t._v("更好的二进制支持")])]),t._v(" "),a("li",[a("p",[t._v("没有同源限制，客户端可以与任意服务器通信")])]),t._v(" "),a("li",[a("p",[t._v("与 HTTP 协议有着良好的兼容性。默认端口也是80和443，并且握手阶段采用 HTTP 协议，因此握手时不容易屏蔽，能通过各种 HTTP 代理服务器")])])]),t._v(" "),a("p",[t._v("作者：OBKoro1\n链接：https://juejin.im/post/5bcad1326fb9a05cda779d0b\n来源：掘金")]),t._v(" "),a("h2",{attrs:{id:"websocket的安全性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket的安全性问题"}},[t._v("#")]),t._v(" WebSocket的安全性问题")]),t._v(" "),a("h4",{attrs:{id:"_2-1-认证"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-认证"}},[t._v("#")]),t._v(" 2.1 认证")]),t._v(" "),a("p",[t._v("WebSocket 协议没有规定服务器在握手阶段应该如何认证客户端身份。服务器可以采用任何 HTTP 服务器的客户端身份认证机制，如 cookie认证，HTTP 基础认证，TLS 身份认证等。在WebSocket应用认证实现上面临的安全问题和传统的Web应用认证是相同的，如："),a("a",{attrs:{href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0201",target:"_blank",rel:"noopener noreferrer"}},[t._v("CVE-2015-0201"),a("OutboundLink")],1),t._v(", Spring框架的Java SockJS客户端生成可预测的会话ID，攻击者可利用该漏洞向其他会话发送消息; "),a("a",{attrs:{href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-1482",target:"_blank",rel:"noopener noreferrer"}},[t._v("CVE-2015-1482"),a("OutboundLink")],1),t._v(", Ansible Tower未对用户身份进行认证，远程攻击者通过websocket连接获取敏感信息。")]),t._v(" "),a("h4",{attrs:{id:"_2-2-授权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-授权"}},[t._v("#")]),t._v(" 2.2 授权")]),t._v(" "),a("p",[t._v("同认证一样，WebSocket协议没有指定任何授权方式，应用程序中用户资源访问等的授权策略由服务端或开发者实现。WebSocket应用也会存在和传统Web应用相同的安全风险，如：垂直权限提升和水平权限提升。")]),t._v(" "),a("h4",{attrs:{id:"_2-3-跨域请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-跨域请求"}},[t._v("#")]),t._v(" 2.3 跨域请求")]),t._v(" "),a("p",[t._v("WebSocket使用基于源的安全模型，在发起WebSocket握手请求时，浏览器会在请求中添加一个名为Origin的HTTP头，Oringin字段表示发起请求的源，以此来防止未经授权的跨站点访问请求。WebSocket 的客户端不仅仅局限于浏览器，因此 WebSocket 规范没有强制规定握手阶段的 Origin 头是必需的，并且WebSocket不受浏览器同源策略的限制。如果服务端没有针对Origin头部进行验证可能会导致跨站点WebSocket劫持攻击。该漏洞最早在 2013 年被Christian Schneider 发现并公开，Christian 将之命名为跨站点 WebSocket 劫持 (Cross Site WebSocket Hijacking)(CSWSH)。跨站点 WebSocket 劫持危害大，但容易被开发人员忽视。相关案例可以参考: IPython Notebook("),a("a",{attrs:{href:"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3429",target:"_blank",rel:"noopener noreferrer"}},[t._v("CVE-2014-3429"),a("OutboundLink")],1),t._v("), OpenStack Compute("),a("a",{attrs:{href:"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-0259",target:"_blank",rel:"noopener noreferrer"}},[t._v("CVE-2015-0259"),a("OutboundLink")],1),t._v("), "),a("a",{attrs:{href:"https://issues.apache.org/jira/browse/ZEPPELIN-173",target:"_blank",rel:"noopener noreferrer"}},[t._v("Zeppelin WebSocket服务器"),a("OutboundLink")],1),t._v("等跨站WebSocket劫持。")]),t._v(" "),a("h4",{attrs:{id:"_2-4-拒绝服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-拒绝服务"}},[t._v("#")]),t._v(" 2.4 拒绝服务")]),t._v(" "),a("p",[t._v("WebSocket设计为面向连接的协议，可被利用引起客户端和服务器端拒绝服务攻击，相关案例可参考: F5 BIG-IP远程拒绝服务漏洞("),a("a",{attrs:{href:"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-9253",target:"_blank",rel:"noopener noreferrer"}},[t._v("CVE-2016-9253"),a("OutboundLink")],1),t._v(")。")]),t._v(" "),a("p",[a("strong",[t._v("(1). 客户端拒绝服务")])]),t._v(" "),a("p",[t._v("WebSocket连接限制不同于HTTP连接限制，和HTTP相比，WebSocket有一个更高的连接限制，不同的浏览器有自己特定的最大连接数,如：火狐浏览器默认最大连接数为200。通过发送恶意内容，用尽允许的所有Websocket连接耗尽浏览器资源，引起拒绝服务。")]),t._v(" "),a("p",[a("strong",[t._v("(2). 服务器端拒绝服务")])]),t._v(" "),a("p",[t._v("WebSocket建立的是持久连接，只有客户端或服务端其中一发提出关闭连接的请求，WebSocket连接才关闭，因此攻击者可以向服务器发起大量的申请建立WebSocket连接的请求，建立持久连接，耗尽服务器资源，引发拒绝服务。针对这种攻，可以通过设置单IP可建立连接的最大连接数的方式防范。攻击者还可以通过发送一个单一的庞大的数据帧(如, 2^16)，或者发送一个长流的分片消息的小帧，来耗尽服务器的内存，引发拒绝服务攻击, 针对这种攻击，通过限制帧大小和多个帧重组后的总消息大小的方式防范。")]),t._v(" "),a("h4",{attrs:{id:"_2-5-中间人攻击"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-中间人攻击"}},[t._v("#")]),t._v(" 2.5 中间人攻击")]),t._v(" "),a("p",[t._v("WebSocket使用HTTP或HTTPS协议进行握手请求，在使用HTTP协议的情况下，若存在中间人可以嗅探HTTP流量，那么中间人可以获取并篡改WebSocket握手请求，通过伪造客户端信息与服务器建立WebSocket连接，如下图所示。防范这种攻击，需要在加密信道上建立WebSocket连接，使用HTTPS协议发起握手请求。")])])}),[],!1,null,null,null);s.default=e.exports}}]);