(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{394:function(t,a,e){"use strict";e.r(a);var s=e(45),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"react"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react"}},[t._v("#")]),t._v(" React")]),t._v(" "),e("h2",{attrs:{id:"react-函数组件和类组件"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-函数组件和类组件"}},[t._v("#")]),t._v(" React 函数组件和类组件")]),t._v(" "),e("p",[t._v("函数组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("const beizou = (props)=>{\n const sayHi=()=>{\n   alert(Hi ${props.name})\n }\n  return(\n     <h1>{props.name}</h1>\n     <button onClick={sayHi}></button>\n     \n  )\n}\n")])])]),e("p",[t._v("类组件")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("class beizou extends React.Component{\n   constructor(props)\n   super(props)\n   this.state={\n     name:'beiozu',\n     age:22\n   }\n   sayHi=()=>{\n     this.setState({\n        name:'hello',\n        age:'23'\n     })\n   }\n   render(){\n      return(\n         <h1>name:{this.state.name},age:{this.state.age}</h2>\n         <button onClick={this.sayHi}>sayHi</button>\n      )\n   }\n}\n")])])]),e("p",[t._v("区别：")]),t._v(" "),e("p",[t._v("1.函数组件相对于类组件代码要少一些，更加简洁")]),t._v(" "),e("p",[t._v("2.函数组件是无状态组件，无法使用state和组件的生命周期函数")]),t._v(" "),e("p",[t._v("3.函数组件没有this,类组件中要绑定this")]),t._v(" "),e("p",[t._v("4函数组件的性能高于类组件")]),t._v(" "),e("p",[t._v("·")]),t._v(" "),e("h2",{attrs:{id:"react-与-vue-的比较"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-与-vue-的比较"}},[t._v("#")]),t._v(" React 与 Vue 的比较")]),t._v(" "),e("h3",{attrs:{id:"组件化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#组件化"}},[t._v("#")]),t._v(" 组件化")]),t._v(" "),e("p",[e("strong",[t._v("什么是模块化")]),t._v("：从代码的角度进行分析的；把一切可复用的代码，抽离为单个模块；便于项目的维护和开发")]),t._v(" "),e("p",[e("strong",[t._v("什么是组件化")]),t._v("： 是从UI的角度进行分析；把一些可复用的UI元素，抽离为单独的组件。")]),t._v(" "),e("p",[e("strong",[t._v("组件化的好处")]),t._v("：随着项目规模的增大，手里的组件雨来越多；很方便就能把现有的组件，拼接为一个完整的页面。")]),t._v(" "),e("p",[t._v("Vue组件的创建")]),t._v(" "),e("h2",{attrs:{id:"react-diff-算法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#react-diff-算法"}},[t._v("#")]),t._v(" React diff 算法")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("把树形结构按层级分级，比较同级元素。   就是Tree Diff")])]),t._v(" "),e("li",[e("p",[t._v("给列表结构的每个单元添加一个唯一的key属性，方便比较")])]),t._v(" "),e("li",[e("p",[t._v("每一层中，组件级别对比，称为  Component Diff")])]),t._v(" "),e("li",[e("p",[t._v("合并操作，调用component的setState方法的时候，React将其标记为dirty,到每一个事件循环结束，React所有标记的dirty的component重新绘制")])]),t._v(" "),e("li",[e("p",[t._v("选择性子树渲染。重写shouldComponentUpdate提高diff的性能")])])]),t._v(" "),e("h2",{attrs:{id:"为什么虚拟dom会提高性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么虚拟dom会提高性能"}},[t._v("#")]),t._v(" 为什么虚拟dom会提高性能")]),t._v(" "),e("p",[t._v("虚拟dom 相当于在js和真实dom中间的缓存，利用dom算法避免没有必要的dom操作。")]),t._v(" "),e("p",[t._v("用JavaScript结构表示dom树结构，构建一个真正的dom树，当状态变更时候，重新构建一颗新的对象树。然后新旧树比较，将差异应用到真正的dom树中，更新视图。")])])}),[],!1,null,null,null);a.default=n.exports}}]);